datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  ownerUserId String
  ownerUser   User     @relation(fields: [ownerUserId], references: [id])
  members     Member[]
}

model Member {
  id          String          @id @default(uuid())
  token       String          @default(uuid())
  name        String?
  title       String?
  description String?
  email       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  timezone    String
  teams       Team[]
  activity    TabActivity[]
  summary     Summary[]
  status      STATUS
  settings    MemberSettings?
}

enum STATUS {
  NEW
  ACTIVE
  PAUSED
  DISABLED
  INVALID
}

model MemberSettings {
  id       String @id @default(uuid())
  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id])
  settings Json // trackMode {ALL, SPECIFIC_DOMAINS}, trackDomains String[]
}

model TabActivity {
  id          String             @id @default(uuid())
  type        TAB_TYPE
  datetime    DateTime
  domain      Domain             @relation(fields: [domainId], references: [id])
  title       String?
  docTitle    String?
  memberToken String
  member      Member             @relation(fields: [memberToken], references: [id])
  timeSpent   Int
  intervals   ActivityInterval[]
  domainId    String
}

model ActivityInterval {
  id            String      @id @default(uuid())
  tabActivityId String
  activity      TabActivity @relation(fields: [tabActivityId], references: [id])
  startDatetime DateTime
  endDatetime   DateTime
}

enum TAB_TYPE {
  WEBSITE
  DOCUMENT
}

model Summary {
  id           String   @id @default(uuid())
  datetime     DateTime
  domainsCount Int
  activityTime Int
  memberToken  String
  member       Member   @relation(fields: [memberToken], references: [id])
}

model SiteBrand {
  id         String   @id @default(uuid())
  title      String
  mainDomain String   @unique
  domains    Domain[]
}

model Domain {
  id          String        @id @default(uuid())
  domain      String        @unique
  catefories  Category[]
  siteBrandId String
  siteBrand   SiteBrand     @relation(fields: [siteBrandId], references: [id])
  TabActivity TabActivity[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  domains     Domain[]
}
