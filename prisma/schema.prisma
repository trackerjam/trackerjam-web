datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  ownerUserId String
  ownerUser   User     @relation(fields: [ownerUserId], references: [id])
  members     Member[]
}

model Member {
  token        String        @id @default(uuid())
  name         String?
  title        String?
  description  String?
  email        String?
  teams        Team[]
  activity     TabActivity[]
  summary      Summary[]
  trackMode    TRACK_MODE
  trackDomains String[]
  timezonw     String
}

enum TRACK_MODE {
  ALL
  SPECIFIC_DOMAINS
}

model TabActivity {
  id          String   @id @default(cuid())
  type        TAB_TYPE
  datetime    DateTime
  domain      String
  title       String?
  docTitle    String?
  memberToken String
  member      Member   @relation(fields: [memberToken], references: [token])
  timeSpent   Int
  intervals   Json // Array<{tsStart, tsEnd}>

  @@unique([datetime, domain])
}

enum TAB_TYPE {
  WEBSITE
  DOCUMENT
}

model Summary {
  id           String   @id @default(cuid())
  datetime     DateTime
  domainsCount Int
  activityTime Int
  memberToken  String
  member       Member   @relation(fields: [memberToken], references: [token])
}
