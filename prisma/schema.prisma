datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
  Member        Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(uuid())
  name        String
  ownerUserId String
  ownerUser   User     @relation(fields: [ownerUserId], references: [id])
  members     Member[]

  @@unique([ownerUserId, name])
}

model Member {
  id             String           @id @default(uuid())
  token          String           @unique @default(uuid())
  name           String?
  title          String?
  description    String?          @db.Text
  email          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt // investigate the bug: https://github.com/prisma/prisma/issues/12572
  timezone       String?
  teams          Team[]
  mangerId       String
  manager        User             @relation(fields: [mangerId], references: [id])
  domainActivity DomainActivity[]
  summary        Summary[]
  status         STATUS           @default(NEW)
  settings       MemberSettings?
}

enum STATUS {
  NEW
  ACTIVE
  PAUSED
  DISABLED
  INVALID
}

model MemberSettings {
  id       String @id @default(uuid())
  memberId String @unique
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  settings Json // trackMode {ALL, SPECIFIC_DOMAINS}, trackDomains String[]
}

model DomainActivity {
  id                String            @id @default(uuid())
  type              TAB_TYPE          @default(WEBSITE)
  date              DateTime          @db.Timestamptz()
  domainId          String
  memberToken       String
  member            Member            @relation(fields: [memberToken], references: [token], onDelete: Cascade)
  timeSpent         Int
  sessionActivities SessionActivity[]
  activitiesCount   Int

  @@unique([date, domainId])
}

model SessionActivity {
  id               String         @id @default(uuid())
  domainActivityId String
  domainActivity   DomainActivity @relation(fields: [domainActivityId], references: [id], onDelete: Cascade)
  startDatetime    DateTime
  endDatetime      DateTime
  url              String         @db.Text
  title            String?        @db.Text
  docTitle         String?        @db.Text
  isHTTPS          Boolean?

  @@unique([domainActivityId, startDatetime, endDatetime])
}

enum TAB_TYPE {
  WEBSITE
  DOCUMENT
}

model Summary {
  id           String   @id @default(uuid())
  date         DateTime @db.Date
  updatedAt    DateTime @updatedAt
  activityTime Int?
  domainsCount Int?
  sessionCount Int?
  memberToken  String
  member       Member   @relation(fields: [memberToken], references: [token], onDelete: Cascade)

  @@unique([date, memberToken])
}

model Domain {
  id         String     @id @default(uuid())
  domain     String     @unique
  categories Category[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  domains     Domain[]
}
